package main

import (
	"fmt"
	"strings"
)

func main() {
	// Test products from your CSV
	testProducts := []string{
		// Vitamin D variations
		"Vitamin D3 2000 IU 30 tableta",
		"Solgar Vitamin D 400 IU 100 kapsula",
		"TERRANOVA GREEN CHILD VITAMIN D3 400 I.J. 50 kapsula",
		"BiVitsÂ® Calcium Vitamin D3 1000 IU",
		"VITAMIN D3+INULIN",
		"Vitamin D3 sprej 1000 IJ 8ml SWISS PLUS",
		"ULTRA VITAMIN D 1000IJ TABLETE  A96",
		"STRONG NATURE VITAMIN D3 2000IU, 30 kom",

		// Vitamin C variations
		"Efekta Vitamin C 1000mg, 20 Å¡umeÄ‡ih tableta",
		"Bivits  Vitamin C 1000 Acerola 60 tableta",
		"VITAMIN C+ZN KAPSULE A20",
		"Vitamin C 500mg 30 kesica",
		"BIOFAR VITAMIN C ACEROLA 500 Å UMEÄ†E TABLETE A20",
		"CEVITAL VITAMIN C 1000MG 10 KESICA",
		"7Nutrition Vitamin C 1000 90 kapsula",

		// Omega variations
		"ONE TWO THREE OMEGA BOOST cps, 30kom.",
		"OMEGA 3 kapsule 50 Å¾elatinoznih kapsula Dietpharm",
		"Natural Wealth Omega 3 Natural 1000mg 100 kapsula",
		"Solgar Omega-3 1000 mg 60 gel kapsula",

		// Calcium variations
		"SOLGAR KALCIJUM+MAGNEZIJUM+BOR 100tableta",
		"BiVitsÂ® Kalcijum Magnezijum Cink 60 Tableta",
		"CALCIUM & MAGNESIUM 250tabl. Now Foods",
	}

	engine := NewEnhancedGroupingEngine()

	// Track groups
	groups := make(map[string][]string)

	fmt.Println("ðŸ”¬ Testing Enhanced Product Grouping")
	fmt.Println(strings.Repeat("=", 80))
	fmt.Println()

	for _, product := range testProducts {
		signature := engine.ExtractSignature(product)
		groupKey := engine.GroupKey(signature)

		groups[groupKey] = append(groups[groupKey], product)

		fmt.Printf("Product: %s\n", product)
		fmt.Printf("  Core Ingredient: %s\n", signature.CoreIngredient)
		fmt.Printf("  Dosage: %.1f %s\n", signature.DosageAmount, signature.DosageUnit)
		fmt.Printf("  Form: %s\n", signature.Form)
		fmt.Printf("  Group Key: %s\n", groupKey)
		fmt.Println()
	}

	// Show grouped results
	fmt.Println(strings.Repeat("=", 80))
	fmt.Println("ðŸ“Š GROUPING RESULTS")
	fmt.Println(strings.Repeat("=", 80))
	fmt.Println()

	for groupKey, products := range groups {
		if len(products) > 1 {
			fmt.Printf("Group: %s (%d products)\n", groupKey, len(products))
			for _, product := range products {
				fmt.Printf("  âœ“ %s\n", product)
			}
			fmt.Println()
		}
	}

	// Show ungrouped (single products)
	singleCount := 0
	for _, products := range groups {
		if len(products) == 1 {
			singleCount++
		}
	}

	totalGroups := len(groups)
	multiProductGroups := totalGroups - singleCount

	fmt.Println(strings.Repeat("=", 80))
	fmt.Println("ðŸ“ˆ STATISTICS")
	fmt.Println(strings.Repeat("=", 80))
	fmt.Printf("Total products: %d\n", len(testProducts))
	fmt.Printf("Total groups: %d\n", totalGroups)
	fmt.Printf("Multi-product groups: %d\n", multiProductGroups)
	fmt.Printf("Single-product groups: %d\n", singleCount)
	fmt.Printf("Average group size: %.2f\n", float64(len(testProducts))/float64(totalGroups))
}
