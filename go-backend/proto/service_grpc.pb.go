// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PharmaAPI_Health_FullMethodName             = "/service.PharmaAPI/Health"
	PharmaAPI_Autocomplete_FullMethodName       = "/service.PharmaAPI/Autocomplete"
	PharmaAPI_Search_FullMethodName             = "/service.PharmaAPI/Search"
	PharmaAPI_SearchGroups_FullMethodName       = "/service.PharmaAPI/SearchGroups"
	PharmaAPI_GetFacets_FullMethodName          = "/service.PharmaAPI/GetFacets"
	PharmaAPI_PriceComparison_FullMethodName    = "/service.PharmaAPI/PriceComparison"
	PharmaAPI_Contact_FullMethodName            = "/service.PharmaAPI/Contact"
	PharmaAPI_ProcessProducts_FullMethodName    = "/service.PharmaAPI/ProcessProducts"
	PharmaAPI_ReprocessAll_FullMethodName       = "/service.PharmaAPI/ReprocessAll"
	PharmaAPI_RebuildIndex_FullMethodName       = "/service.PharmaAPI/RebuildIndex"
	PharmaAPI_ProcessingAnalysis_FullMethodName = "/service.PharmaAPI/ProcessingAnalysis"
)

// PharmaAPIClient is the client API for PharmaAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PharmaAPIClient interface {
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	Autocomplete(ctx context.Context, in *AutocompleteRequest, opts ...grpc.CallOption) (*AutocompleteResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	SearchGroups(ctx context.Context, in *SearchGroupsRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	GetFacets(ctx context.Context, in *FacetsRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	PriceComparison(ctx context.Context, in *PriceComparisonRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	Contact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	ProcessProducts(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	ReprocessAll(ctx context.Context, in *ReprocessAllRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
	ProcessingAnalysis(ctx context.Context, in *ProcessingAnalysisRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error)
}

type pharmaAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPharmaAPIClient(cc grpc.ClientConnInterface) PharmaAPIClient {
	return &pharmaAPIClient{cc}
}

func (c *pharmaAPIClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_Health_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) Autocomplete(ctx context.Context, in *AutocompleteRequest, opts ...grpc.CallOption) (*AutocompleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AutocompleteResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_Autocomplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) SearchGroups(ctx context.Context, in *SearchGroupsRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_SearchGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) GetFacets(ctx context.Context, in *FacetsRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_GetFacets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) PriceComparison(ctx context.Context, in *PriceComparisonRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_PriceComparison_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) Contact(ctx context.Context, in *ContactRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_Contact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) ProcessProducts(ctx context.Context, in *ProcessRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_ProcessProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) ReprocessAll(ctx context.Context, in *ReprocessAllRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_ReprocessAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) RebuildIndex(ctx context.Context, in *RebuildIndexRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_RebuildIndex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmaAPIClient) ProcessingAnalysis(ctx context.Context, in *ProcessingAnalysisRequest, opts ...grpc.CallOption) (*GenericJsonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenericJsonResponse)
	err := c.cc.Invoke(ctx, PharmaAPI_ProcessingAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharmaAPIServer is the server API for PharmaAPI service.
// All implementations must embed UnimplementedPharmaAPIServer
// for forward compatibility.
type PharmaAPIServer interface {
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	Autocomplete(context.Context, *AutocompleteRequest) (*AutocompleteResponse, error)
	Search(context.Context, *SearchRequest) (*GenericJsonResponse, error)
	SearchGroups(context.Context, *SearchGroupsRequest) (*GenericJsonResponse, error)
	GetFacets(context.Context, *FacetsRequest) (*GenericJsonResponse, error)
	PriceComparison(context.Context, *PriceComparisonRequest) (*GenericJsonResponse, error)
	Contact(context.Context, *ContactRequest) (*GenericJsonResponse, error)
	ProcessProducts(context.Context, *ProcessRequest) (*GenericJsonResponse, error)
	ReprocessAll(context.Context, *ReprocessAllRequest) (*GenericJsonResponse, error)
	RebuildIndex(context.Context, *RebuildIndexRequest) (*GenericJsonResponse, error)
	ProcessingAnalysis(context.Context, *ProcessingAnalysisRequest) (*GenericJsonResponse, error)
	mustEmbedUnimplementedPharmaAPIServer()
}

// UnimplementedPharmaAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPharmaAPIServer struct{}

func (UnimplementedPharmaAPIServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedPharmaAPIServer) Autocomplete(context.Context, *AutocompleteRequest) (*AutocompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Autocomplete not implemented")
}
func (UnimplementedPharmaAPIServer) Search(context.Context, *SearchRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedPharmaAPIServer) SearchGroups(context.Context, *SearchGroupsRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGroups not implemented")
}
func (UnimplementedPharmaAPIServer) GetFacets(context.Context, *FacetsRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFacets not implemented")
}
func (UnimplementedPharmaAPIServer) PriceComparison(context.Context, *PriceComparisonRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PriceComparison not implemented")
}
func (UnimplementedPharmaAPIServer) Contact(context.Context, *ContactRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contact not implemented")
}
func (UnimplementedPharmaAPIServer) ProcessProducts(context.Context, *ProcessRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessProducts not implemented")
}
func (UnimplementedPharmaAPIServer) ReprocessAll(context.Context, *ReprocessAllRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReprocessAll not implemented")
}
func (UnimplementedPharmaAPIServer) RebuildIndex(context.Context, *RebuildIndexRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebuildIndex not implemented")
}
func (UnimplementedPharmaAPIServer) ProcessingAnalysis(context.Context, *ProcessingAnalysisRequest) (*GenericJsonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessingAnalysis not implemented")
}
func (UnimplementedPharmaAPIServer) mustEmbedUnimplementedPharmaAPIServer() {}
func (UnimplementedPharmaAPIServer) testEmbeddedByValue()                   {}

// UnsafePharmaAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharmaAPIServer will
// result in compilation errors.
type UnsafePharmaAPIServer interface {
	mustEmbedUnimplementedPharmaAPIServer()
}

func RegisterPharmaAPIServer(s grpc.ServiceRegistrar, srv PharmaAPIServer) {
	// If the following call pancis, it indicates UnimplementedPharmaAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PharmaAPI_ServiceDesc, srv)
}

func _PharmaAPI_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_Health_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_Autocomplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutocompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).Autocomplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_Autocomplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).Autocomplete(ctx, req.(*AutocompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_SearchGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).SearchGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_SearchGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).SearchGroups(ctx, req.(*SearchGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_GetFacets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FacetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).GetFacets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_GetFacets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).GetFacets(ctx, req.(*FacetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_PriceComparison_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceComparisonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).PriceComparison(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_PriceComparison_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).PriceComparison(ctx, req.(*PriceComparisonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_Contact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).Contact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_Contact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).Contact(ctx, req.(*ContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_ProcessProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).ProcessProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_ProcessProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).ProcessProducts(ctx, req.(*ProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_ReprocessAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReprocessAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).ReprocessAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_ReprocessAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).ReprocessAll(ctx, req.(*ReprocessAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_RebuildIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebuildIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).RebuildIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_RebuildIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).RebuildIndex(ctx, req.(*RebuildIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmaAPI_ProcessingAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessingAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmaAPIServer).ProcessingAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmaAPI_ProcessingAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmaAPIServer).ProcessingAnalysis(ctx, req.(*ProcessingAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PharmaAPI_ServiceDesc is the grpc.ServiceDesc for PharmaAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PharmaAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.PharmaAPI",
	HandlerType: (*PharmaAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Health",
			Handler:    _PharmaAPI_Health_Handler,
		},
		{
			MethodName: "Autocomplete",
			Handler:    _PharmaAPI_Autocomplete_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _PharmaAPI_Search_Handler,
		},
		{
			MethodName: "SearchGroups",
			Handler:    _PharmaAPI_SearchGroups_Handler,
		},
		{
			MethodName: "GetFacets",
			Handler:    _PharmaAPI_GetFacets_Handler,
		},
		{
			MethodName: "PriceComparison",
			Handler:    _PharmaAPI_PriceComparison_Handler,
		},
		{
			MethodName: "Contact",
			Handler:    _PharmaAPI_Contact_Handler,
		},
		{
			MethodName: "ProcessProducts",
			Handler:    _PharmaAPI_ProcessProducts_Handler,
		},
		{
			MethodName: "ReprocessAll",
			Handler:    _PharmaAPI_ReprocessAll_Handler,
		},
		{
			MethodName: "RebuildIndex",
			Handler:    _PharmaAPI_RebuildIndex_Handler,
		},
		{
			MethodName: "ProcessingAnalysis",
			Handler:    _PharmaAPI_ProcessingAnalysis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
