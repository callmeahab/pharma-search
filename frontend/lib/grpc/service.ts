// @generated by protobuf-ts 2.11.1 with parameter client_grpc1
// @generated from protobuf file "service.proto" (package "service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "./google/protobuf/struct";
/**
 * @generated from protobuf message service.GenericJsonResponse
 */
export interface GenericJsonResponse {
    /**
     * @generated from protobuf field: google.protobuf.Struct data = 1
     */
    data?: Struct;
}
/**
 * @generated from protobuf message service.HealthRequest
 */
export interface HealthRequest {
}
/**
 * @generated from protobuf message service.HealthResponse
 */
export interface HealthResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message service.AutocompleteRequest
 */
export interface AutocompleteRequest {
    /**
     * @generated from protobuf field: string q = 1
     */
    q: string;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
}
/**
 * @generated from protobuf message service.AutocompleteSuggestion
 */
export interface AutocompleteSuggestion {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string title = 2
     */
    title: string;
    /**
     * @generated from protobuf field: double price = 3
     */
    price: number;
    /**
     * @generated from protobuf field: string vendor_name = 4
     */
    vendorName: string;
}
/**
 * @generated from protobuf message service.AutocompleteResponse
 */
export interface AutocompleteResponse {
    /**
     * @generated from protobuf field: repeated service.AutocompleteSuggestion suggestions = 1
     */
    suggestions: AutocompleteSuggestion[];
    /**
     * @generated from protobuf field: string query = 2
     */
    query: string;
    /**
     * @generated from protobuf field: int32 limit = 3
     */
    limit: number;
}
/**
 * @generated from protobuf message service.SearchRequest
 */
export interface SearchRequest {
    /**
     * @generated from protobuf field: string q = 1
     */
    q: string;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 3
     */
    offset: number;
    /**
     * @generated from protobuf field: double min_price = 4
     */
    minPrice: number;
    /**
     * @generated from protobuf field: double max_price = 5
     */
    maxPrice: number;
    /**
     * @generated from protobuf field: repeated string brand_names = 6
     */
    brandNames: string[];
    /**
     * @generated from protobuf field: repeated string categories = 7
     */
    categories: string[];
    /**
     * @generated from protobuf field: repeated string forms = 8
     */
    forms: string[];
    /**
     * @generated from protobuf field: bool in_stock_only = 9
     */
    inStockOnly: boolean;
}
/**
 * @generated from protobuf message service.SearchGroupsRequest
 */
export interface SearchGroupsRequest {
    /**
     * @generated from protobuf field: string q = 1
     */
    q: string;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
}
/**
 * @generated from protobuf message service.FacetsRequest
 */
export interface FacetsRequest {
}
/**
 * @generated from protobuf message service.PriceComparisonRequest
 */
export interface PriceComparisonRequest {
    /**
     * @generated from protobuf field: string q = 1
     */
    q: string;
}
/**
 * @generated from protobuf message service.ContactRequest
 */
export interface ContactRequest {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string email = 2
     */
    email: string;
    /**
     * @generated from protobuf field: string message = 3
     */
    message: string;
}
/**
 * @generated from protobuf message service.ProcessRequest
 */
export interface ProcessRequest {
    /**
     * @generated from protobuf field: int32 batch_size = 1
     */
    batchSize: number;
}
/**
 * @generated from protobuf message service.ReprocessAllRequest
 */
export interface ReprocessAllRequest {
}
/**
 * @generated from protobuf message service.RebuildIndexRequest
 */
export interface RebuildIndexRequest {
}
/**
 * @generated from protobuf message service.ProcessingAnalysisRequest
 */
export interface ProcessingAnalysisRequest {
}
// @generated message type with reflection information, may provide speed optimized methods
class GenericJsonResponse$Type extends MessageType<GenericJsonResponse> {
    constructor() {
        super("service.GenericJsonResponse", [
            { no: 1, name: "data", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<GenericJsonResponse>): GenericJsonResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GenericJsonResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericJsonResponse): GenericJsonResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Struct data */ 1:
                    message.data = Struct.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenericJsonResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Struct data = 1; */
        if (message.data)
            Struct.internalBinaryWrite(message.data, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.GenericJsonResponse
 */
export const GenericJsonResponse = new GenericJsonResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HealthRequest$Type extends MessageType<HealthRequest> {
    constructor() {
        super("service.HealthRequest", []);
    }
    create(value?: PartialMessage<HealthRequest>): HealthRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<HealthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealthRequest): HealthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HealthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.HealthRequest
 */
export const HealthRequest = new HealthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HealthResponse$Type extends MessageType<HealthResponse> {
    constructor() {
        super("service.HealthResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HealthResponse>): HealthResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<HealthResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealthResponse): HealthResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HealthResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.HealthResponse
 */
export const HealthResponse = new HealthResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutocompleteRequest$Type extends MessageType<AutocompleteRequest> {
    constructor() {
        super("service.AutocompleteRequest", [
            { no: 1, name: "q", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AutocompleteRequest>): AutocompleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.q = "";
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<AutocompleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutocompleteRequest): AutocompleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string q */ 1:
                    message.q = reader.string();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutocompleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string q = 1; */
        if (message.q !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.q);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.AutocompleteRequest
 */
export const AutocompleteRequest = new AutocompleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutocompleteSuggestion$Type extends MessageType<AutocompleteSuggestion> {
    constructor() {
        super("service.AutocompleteSuggestion", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "vendor_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AutocompleteSuggestion>): AutocompleteSuggestion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        message.price = 0;
        message.vendorName = "";
        if (value !== undefined)
            reflectionMergePartial<AutocompleteSuggestion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutocompleteSuggestion): AutocompleteSuggestion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* double price */ 3:
                    message.price = reader.double();
                    break;
                case /* string vendor_name */ 4:
                    message.vendorName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutocompleteSuggestion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* double price = 3; */
        if (message.price !== 0)
            writer.tag(3, WireType.Bit64).double(message.price);
        /* string vendor_name = 4; */
        if (message.vendorName !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.vendorName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.AutocompleteSuggestion
 */
export const AutocompleteSuggestion = new AutocompleteSuggestion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutocompleteResponse$Type extends MessageType<AutocompleteResponse> {
    constructor() {
        super("service.AutocompleteResponse", [
            { no: 1, name: "suggestions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AutocompleteSuggestion },
            { no: 2, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AutocompleteResponse>): AutocompleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.suggestions = [];
        message.query = "";
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<AutocompleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutocompleteResponse): AutocompleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated service.AutocompleteSuggestion suggestions */ 1:
                    message.suggestions.push(AutocompleteSuggestion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string query */ 2:
                    message.query = reader.string();
                    break;
                case /* int32 limit */ 3:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutocompleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated service.AutocompleteSuggestion suggestions = 1; */
        for (let i = 0; i < message.suggestions.length; i++)
            AutocompleteSuggestion.internalBinaryWrite(message.suggestions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string query = 2; */
        if (message.query !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.query);
        /* int32 limit = 3; */
        if (message.limit !== 0)
            writer.tag(3, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.AutocompleteResponse
 */
export const AutocompleteResponse = new AutocompleteResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchRequest$Type extends MessageType<SearchRequest> {
    constructor() {
        super("service.SearchRequest", [
            { no: 1, name: "q", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "min_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "max_price", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 6, name: "brand_names", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "categories", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "forms", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "in_stock_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SearchRequest>): SearchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.q = "";
        message.limit = 0;
        message.offset = 0;
        message.minPrice = 0;
        message.maxPrice = 0;
        message.brandNames = [];
        message.categories = [];
        message.forms = [];
        message.inStockOnly = false;
        if (value !== undefined)
            reflectionMergePartial<SearchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchRequest): SearchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string q */ 1:
                    message.q = reader.string();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 3:
                    message.offset = reader.int32();
                    break;
                case /* double min_price */ 4:
                    message.minPrice = reader.double();
                    break;
                case /* double max_price */ 5:
                    message.maxPrice = reader.double();
                    break;
                case /* repeated string brand_names */ 6:
                    message.brandNames.push(reader.string());
                    break;
                case /* repeated string categories */ 7:
                    message.categories.push(reader.string());
                    break;
                case /* repeated string forms */ 8:
                    message.forms.push(reader.string());
                    break;
                case /* bool in_stock_only */ 9:
                    message.inStockOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string q = 1; */
        if (message.q !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.q);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).int32(message.offset);
        /* double min_price = 4; */
        if (message.minPrice !== 0)
            writer.tag(4, WireType.Bit64).double(message.minPrice);
        /* double max_price = 5; */
        if (message.maxPrice !== 0)
            writer.tag(5, WireType.Bit64).double(message.maxPrice);
        /* repeated string brand_names = 6; */
        for (let i = 0; i < message.brandNames.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.brandNames[i]);
        /* repeated string categories = 7; */
        for (let i = 0; i < message.categories.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.categories[i]);
        /* repeated string forms = 8; */
        for (let i = 0; i < message.forms.length; i++)
            writer.tag(8, WireType.LengthDelimited).string(message.forms[i]);
        /* bool in_stock_only = 9; */
        if (message.inStockOnly !== false)
            writer.tag(9, WireType.Varint).bool(message.inStockOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.SearchRequest
 */
export const SearchRequest = new SearchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchGroupsRequest$Type extends MessageType<SearchGroupsRequest> {
    constructor() {
        super("service.SearchGroupsRequest", [
            { no: 1, name: "q", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchGroupsRequest>): SearchGroupsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.q = "";
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<SearchGroupsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchGroupsRequest): SearchGroupsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string q */ 1:
                    message.q = reader.string();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchGroupsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string q = 1; */
        if (message.q !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.q);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.SearchGroupsRequest
 */
export const SearchGroupsRequest = new SearchGroupsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FacetsRequest$Type extends MessageType<FacetsRequest> {
    constructor() {
        super("service.FacetsRequest", []);
    }
    create(value?: PartialMessage<FacetsRequest>): FacetsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FacetsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FacetsRequest): FacetsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FacetsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.FacetsRequest
 */
export const FacetsRequest = new FacetsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PriceComparisonRequest$Type extends MessageType<PriceComparisonRequest> {
    constructor() {
        super("service.PriceComparisonRequest", [
            { no: 1, name: "q", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PriceComparisonRequest>): PriceComparisonRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.q = "";
        if (value !== undefined)
            reflectionMergePartial<PriceComparisonRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriceComparisonRequest): PriceComparisonRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string q */ 1:
                    message.q = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PriceComparisonRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string q = 1; */
        if (message.q !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.q);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.PriceComparisonRequest
 */
export const PriceComparisonRequest = new PriceComparisonRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ContactRequest$Type extends MessageType<ContactRequest> {
    constructor() {
        super("service.ContactRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ContactRequest>): ContactRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.email = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ContactRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContactRequest): ContactRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string email */ 2:
                    message.email = reader.string();
                    break;
                case /* string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContactRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string email = 2; */
        if (message.email !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.email);
        /* string message = 3; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.ContactRequest
 */
export const ContactRequest = new ContactRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessRequest$Type extends MessageType<ProcessRequest> {
    constructor() {
        super("service.ProcessRequest", [
            { no: 1, name: "batch_size", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ProcessRequest>): ProcessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.batchSize = 0;
        if (value !== undefined)
            reflectionMergePartial<ProcessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessRequest): ProcessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 batch_size */ 1:
                    message.batchSize = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProcessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 batch_size = 1; */
        if (message.batchSize !== 0)
            writer.tag(1, WireType.Varint).int32(message.batchSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.ProcessRequest
 */
export const ProcessRequest = new ProcessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReprocessAllRequest$Type extends MessageType<ReprocessAllRequest> {
    constructor() {
        super("service.ReprocessAllRequest", []);
    }
    create(value?: PartialMessage<ReprocessAllRequest>): ReprocessAllRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReprocessAllRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReprocessAllRequest): ReprocessAllRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReprocessAllRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.ReprocessAllRequest
 */
export const ReprocessAllRequest = new ReprocessAllRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RebuildIndexRequest$Type extends MessageType<RebuildIndexRequest> {
    constructor() {
        super("service.RebuildIndexRequest", []);
    }
    create(value?: PartialMessage<RebuildIndexRequest>): RebuildIndexRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RebuildIndexRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RebuildIndexRequest): RebuildIndexRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RebuildIndexRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.RebuildIndexRequest
 */
export const RebuildIndexRequest = new RebuildIndexRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProcessingAnalysisRequest$Type extends MessageType<ProcessingAnalysisRequest> {
    constructor() {
        super("service.ProcessingAnalysisRequest", []);
    }
    create(value?: PartialMessage<ProcessingAnalysisRequest>): ProcessingAnalysisRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ProcessingAnalysisRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProcessingAnalysisRequest): ProcessingAnalysisRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProcessingAnalysisRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message service.ProcessingAnalysisRequest
 */
export const ProcessingAnalysisRequest = new ProcessingAnalysisRequest$Type();
/**
 * @generated ServiceType for protobuf service service.PharmaAPI
 */
export const PharmaAPI = new ServiceType("service.PharmaAPI", [
    { name: "Health", options: {}, I: HealthRequest, O: HealthResponse },
    { name: "Autocomplete", options: {}, I: AutocompleteRequest, O: AutocompleteResponse },
    { name: "Search", options: {}, I: SearchRequest, O: GenericJsonResponse },
    { name: "SearchGroups", options: {}, I: SearchGroupsRequest, O: GenericJsonResponse },
    { name: "GetFacets", options: {}, I: FacetsRequest, O: GenericJsonResponse },
    { name: "PriceComparison", options: {}, I: PriceComparisonRequest, O: GenericJsonResponse },
    { name: "Contact", options: {}, I: ContactRequest, O: GenericJsonResponse },
    { name: "ProcessProducts", options: {}, I: ProcessRequest, O: GenericJsonResponse },
    { name: "ReprocessAll", options: {}, I: ReprocessAllRequest, O: GenericJsonResponse },
    { name: "RebuildIndex", options: {}, I: RebuildIndexRequest, O: GenericJsonResponse },
    { name: "ProcessingAnalysis", options: {}, I: ProcessingAnalysisRequest, O: GenericJsonResponse }
]);
